{"version":3,"sources":["components/header/Header.tsx","components/footer/Footer.tsx","components/entry-search/EntrySearch.tsx","components/entry-search-response/DisplayEntrySearchResponse.tsx","components/dns-response/DisplayDnsQuery.tsx","exceptions/ApiError.ts","exceptions/ErrorResponse.ts","services/ApiClient.ts","hooks/UseDnsQuery.ts","hooks/UseEntrySearch.ts","components/entry-search-page/EntrySearchPage.tsx","hooks/UseQueryParam.ts","hooks/UseBlocklists.ts","components/blocklists-table/BlocklistsTable.tsx","components/blocklists-page/BlocklistsPage.tsx","hooks/UseVersionDiff.ts","components/version-diff-response/VersionDiffResponse.tsx","components/version-diff-page/VersionDiffPage.tsx","components/header-nav/HeaderNav.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","href","src","alt","Footer","EntrySearch","props","useState","value","query","setQuery","useEffect","textInput","useRef","onSubmit","event","preventDefault","hostname","URL","e","hidden","htmlFor","autoFocus","ref","id","title","type","spellCheck","autoCapitalize","autoCorrect","autoComplete","autoSave","name","placeholder","onChange","target","trim","toLowerCase","onClick","current","focus","dateSpan","date","altText","text","toDateString","toISOString","entryStatus","entry","stillBlocked","removedOn","initialVersion","addedOn","listAddedOn","isIncluded","removedVersionId","join","icon","includedIcon","addedVersionId","DisplayEntrySearchResponse","entrySearchResponse","content","summaries","length","listItems","map","key","blocklistName","DisplayDnsQuery","dnsQuery","queryType","onQueryTypeChange","response","ApiError","error","message","stack","Error","ErrorResponse","this","Response","ApiClient","input","init","fetch","fromError","domainName","params","URLSearchParams","append","safeFetch","rootApiUrl","headers","defaultHeaders","mode","method","status","console","log","fromMessage","json","body","summary","Date","blocklistId","firstVersion","secondVersion","lines","split","page","UseDnsQuery","setDnsQuery","applyDnsResponse","dnsResponse","clearDnsQuery","queryName","then","getDnsQuery","UseEntrySearch","setEntrySearchResponse","applyEntrySearchResponse","clearResponse","entrySearch","process","EntrySearchPage","paramName","defaultValue","queryParamState","setQueryParamState","queryParam","useLocation","search","get","UseQueryParam","updateQueryType","queryResponse","history","useHistory","searchQuery","queryString","encodeURIComponent","push","updateEntrySearch","newQueryType","UseBlocklists","loaded","setLoaded","blocklists","setBlocklists","a","lists","complete","fetchLists","concat","loadBlocklists","BlocklistsTable","table","blocklist","homepageUrl","rel","faHome","downloadUrl","faFileDownload","format","issuesUrl","faExclamationCircle","licenseUrl","faGavel","licenseType","BlocklistsPage","UseVersionDiff","versionDiff","setVersionDiff","applyVersionDiff","getVersionDiff","VersionDiffResponse","diffContent","line","index","lineClass","startsWith","VersionDiffPage","useParams","HeaderNav","to","faSearch","faListUl","App","Fragment","path","component","Boolean","window","location","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c857298f.chunk.js","sourcesContent":["import React, {FunctionComponent} from \"react\";\nimport \"./Header.css\"\n\nexport const Header: FunctionComponent = () =>  {\n    return (\n        <h1 className=\"component-header\">\n          <a href=\"https://www.github.developerdan.com/\">\n            <img className=\"avatar\" src=\"/lightswitch05.png\" alt=\"lightswitch05 avatar\" />\n          </a>\n          Blocklist Tools: <small><a href=\"https://github.com/blocklist-tools\">Source on\n          Github</a></small>\n        </h1>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport \"./Footer.css\"\n\nexport const Footer: FunctionComponent = () =>  {\n    return (\n        <footer className={'component-footer'}>Copyright &copy; 2020 Daniel White</footer>\n    );\n};","import React, {FunctionComponent, useEffect, useRef, useState} from \"react\";\nimport \"./EntrySearch.css\";\n\ninterface IEntrySearch {\n  value: string\n  onSubmit: (arg0: string) => void;\n}\n\nexport const EntrySearch: FunctionComponent<IEntrySearch> = (props: IEntrySearch) => {\n  const [query, setQuery] = useState(props.value);\n\n  useEffect(() => {\n    setQuery(props.value);\n  }, [props.value]);\n\n  const textInput = useRef<HTMLInputElement | null>(null);\n\n  function handleChangedQuery(event: { target: HTMLInputElement; }) {\n    setQuery(event.target.value.trim().toLowerCase());\n  }\n\n  function handleSubmit(event: React.FormEvent) {\n    event.preventDefault();\n    let hostname = query;\n    try {\n      hostname = new URL(hostname).hostname\n    } catch (e) {\n    }\n    props.onSubmit(hostname);\n  }\n\n  function handleClear() {\n    setQuery('');\n    props.onSubmit('');\n    textInput?.current?.focus();\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className={\"component-entry-search\"}>\n      <label hidden htmlFor=\"entry-search-input\">URL Search</label>\n      <input\n        autoFocus\n        ref={textInput}\n        id=\"entry-search-input\"\n        title=\"Search for domain name or URL\"\n        type=\"text\"\n        spellCheck=\"false\"\n        autoCapitalize=\"false\"\n        autoCorrect=\"false\"\n        autoComplete=\"false\"\n        autoSave=\"false\"\n        name=\"urlSearch\"\n        placeholder=\"Domain or URL\"\n        value={query}\n        onChange={handleChangedQuery}\n      />\n      <button type=\"button\" title=\"Clear form\" onClick={handleClear}>&#9003;</button>\n      <button type={\"submit\"}>&#128269;</button>\n    </form>\n  );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {EntrySearchResponse, EntrySummary} from \"../../services/ApiClient\";\nimport \"./DisplayEntrySearchResponse.css\";\n\ninterface IDisplayEntrySearchResponse {\n  entrySearchResponse: EntrySearchResponse | null\n}\n\nfunction dateSpan(date: Date|null, altText: string | null) {\n  let text = '';\n  let title = null;\n  if (date) {\n    text = date.toDateString();\n    title = date.toISOString();\n  }\n  if (altText) {\n    text = altText;\n  }\n  title = title || text;\n  return (<span title={title}>{text}</span>)\n}\n\nfunction includedIcon(entry: EntrySummary) {\n  const isIncluded = entry.removedVersionId !== null;\n  const className = [\n    'included-icon',\n    isIncluded ? 'is-removed' : 'is-included'\n  ].join(' ');\n  const icon = isIncluded ? '🚫' : '✔';\n\n  return (<span className={className}>{icon}</span>);\n}\n\nfunction entryStatus(entry: EntrySummary) {\n  let stillBlocked = null;\n  if (!entry.removedOn) {\n    stillBlocked = 'Current Version';\n  }\n  let initialVersion = null;\n  if (entry.addedOn.toISOString() === entry.listAddedOn.toISOString()) {\n    initialVersion = 'Initial Version';\n  }\n  return (\n    <div>\n      {includedIcon(entry)}\n      <a href={`/versions/${entry.addedVersionId}/diff`}>\n        {dateSpan(entry.addedOn, initialVersion)}\n      </a>\n      -\n      <a href={`/versions/${entry.removedVersionId}/diff`}>\n        {dateSpan(entry.removedOn, stillBlocked)}\n      </a>\n    </div>\n  );\n}\n\nexport const DisplayEntrySearchResponse: FunctionComponent<IDisplayEntrySearchResponse> = (props: IDisplayEntrySearchResponse) => {\n  if (!props.entrySearchResponse) {\n    return null;\n  }\n  let content;\n  if (props.entrySearchResponse.summaries.length === 0) {\n    content = (\n      <div>No known list contains {props.entrySearchResponse.query}</div>\n    );\n  } else {\n    const listItems = props.entrySearchResponse.summaries.map((entry) => {\n      return (\n        <li key={entry.addedVersionId}>\n          <div className={'blocklist-name'}>{entry.blocklistName}</div>\n          {entryStatus(entry)}\n        </li>\n      );\n    });\n    content = (\n      <div>\n        <p>Blocklists that contain a matching entry, including the date it was first added, and optionally removed.</p>\n        <ul>{listItems}</ul>\n      </div>\n    )\n  }\n\n  return (\n    <section className={'component-display-entry-search-response basic-section'}>\n      <h2>\n        Lists containing {props.entrySearchResponse.query}\n      </h2>\n      {content}\n    </section>\n  );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {DnsQuery} from \"../../services/ApiClient\";\n\ninterface IDisplayDnsQuery {\n  dnsQuery: DnsQuery|null\n  onQueryTypeChange: (arg0: string)=>void;\n}\n\nexport const DisplayDnsQuery: FunctionComponent<IDisplayDnsQuery> = (props: IDisplayDnsQuery) =>  {\n  function handleChangedQueryType(event: { target: HTMLSelectElement; }) {\n    props.onQueryTypeChange(event.target.value);\n  }\n\n  if (!props.dnsQuery) {\n    return null;\n  }\n\n  return (\n    <section className={\"component-display-dns-query basic-section\"}>\n      <h2>\n        DNS Query\n\n        <label hidden htmlFor=\"dns-query-select\">Query Type</label>\n        <select id=\"dns-query-select\" value={props.dnsQuery.queryType} onChange={handleChangedQueryType}>\n          <option>A</option>\n          <option>AAAA</option>\n          <option>CAA</option>\n          <option>CNAME</option>\n          <option>MX</option>\n          <option>NS</option>\n          <option>PTR</option>\n          <option>SOA</option>\n          <option>SRV</option>\n          <option>TXT</option>\n        </select>\n      </h2>\n      <code>\n        <pre>{props.dnsQuery.response}</pre>\n      </code>\n    </section>\n  );\n};\n","export default class ApiError extends Error {\n\n    private constructor(error: Error) {\n        super(error.message);\n        this.name = 'ApiError';\n        this.stack = error.stack;\n    }\n\n    public static fromMessage(message: string) {\n        return new ApiError(new Error(message));\n    }\n}","/**\n * Extend Response to avoid try/catch everywhere.\n */\nexport default class ErrorResponse extends Response {\n    private readonly message: string;\n\n    private constructor(message: string) {\n        super(null);\n        this.message = message;\n    }\n\n    /**\n     * @param {Error} error Exception to generate an ErrorResponse from\n     */\n    public static fromError(error: Error) {\n        return new ErrorResponse(error.message);\n    }\n\n    /**\n     * Response does not allow a status code of 0 (out of range)\n     * @override\n     */\n    get status(): number {\n        return 0;\n    }\n\n    /**\n     * No way to set statusText directly in Response\n     * @override\n     */\n    get statusText(): string {\n        return this.message;\n    }\n}","import ErrorResponse from \"../exceptions/ErrorResponse\";\nimport ApiError from \"../exceptions/ApiError\";\n\nexport interface DnsQuery {\n  queryName: string\n  queryType: string\n  response: string\n  rcode: string\n}\n\nexport interface EntrySearchResponse {\n  query: string\n  summaries: EntrySummary[]\n}\n\nexport interface EntrySummary {\n  blocklistName: string\n  blocklistId: string\n  addedVersionId: string\n  addedOn: Date\n  removedVersionId: string|null\n  removedOn: Date|null\n  listAddedOn: Date\n}\n\nexport interface VersionDiff {\n  firstVersion: string\n  secondVersion: string|null\n  lines: string[]\n}\n\nexport interface Blocklist {\n  id: string\n  name: string\n  format: string\n  downloadUrl: string\n  homepageUrl: string\n  issuesUrl: string\n  licenseUrl: string\n  licenseType: string\n}\n\nexport default class ApiClient {\n  private static readonly rootApiUrl = process.env.REACT_APP_ROOT_API_URL;\n\n  private static readonly defaultHeaders = () => {\n    return {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  /**\n   * Native fetch wrapped in a try/catch to return an ErrorResponse instead of throwing. The\n   * promise is always resolved and will never be rejected.\n   * @throws never\n   */\n  private static async safeFetch(input: RequestInfo, init?: RequestInit): Promise<Response | ErrorResponse> {\n    try {\n      return await fetch(input, init);\n    } catch (error) {\n      return ErrorResponse.fromError(error);\n    }\n  }\n\n  public static async dnsQuery(domainName: string, queryType: string): Promise<DnsQuery | ApiError> {\n    let params = new URLSearchParams();\n    params.append('name', domainName);\n    params.append('type', queryType);\n    const response = await this.safeFetch(`${this.rootApiUrl}/dns-query?${params}`, {\n      headers: this.defaultHeaders(),\n      mode: 'cors',\n      method: 'GET'\n    });\n\n    if (response.status !== 200) {\n      let error = `DNS query failed: ${response.status} => ${await response.text()}`;\n      console.log(error);\n      return ApiError.fromMessage(error);\n    }\n    return await response.json();\n  }\n\n  public static async entrySearch(query: string): Promise<EntrySearchResponse | ApiError> {\n    let params = new URLSearchParams();\n    params.append('q', query);\n    const response = await this.safeFetch(`${this.rootApiUrl}/entries/search?${params}`, {\n      headers: this.defaultHeaders(),\n      mode: 'cors',\n      method: 'GET'\n    });\n    if (response.status !== 200) {\n      let error = `Entry search failed: ${response.status} => ${await response.text()}`;\n      console.log(error);\n      return ApiError.fromMessage(error);\n    }\n    const body = await response.json() as any;\n\n    const summaries = body.summaries.map(function (summary: any) {\n      let removedOn = summary.removedOn;\n      if (summary.removedOn) {\n        removedOn = new Date(summary.removedOn)\n      }\n      return {\n        blocklistName: summary.blocklistName,\n        blocklistId: summary.blocklistId,\n        addedVersionId: summary.addedVersionId,\n        addedOn: new Date(summary.addedOn),\n        removedVersionId: summary.removedVersionId,\n        removedOn: removedOn,\n        listAddedOn: new Date(summary.listAddedOn)\n      }\n    });\n    return {\n      query: body.query as string,\n      summaries: summaries\n    }\n  }\n\n  public static async versionDiff(firstVersion: string, secondVersion: string|null): Promise<VersionDiff | ApiError> {\n    const response = await this.safeFetch(`${this.rootApiUrl}/versions/${firstVersion}/diff/${secondVersion || ''}`, {\n      headers: this.defaultHeaders(),\n      mode: 'cors',\n      method: 'GET'\n    });\n\n    if (response.status !== 200) {\n      let error = `Version diff query failed: ${response.status} => ${await response.text()}`;\n      console.log(error);\n      return ApiError.fromMessage(error);\n    }\n    const body = await response.text();\n    return {\n      firstVersion: firstVersion,\n      secondVersion: secondVersion,\n      lines: body.split(/\\r?\\n/)\n    };\n  }\n\n  public static async fetchLists(page: number) {\n    const response = await this.safeFetch(`${this.rootApiUrl}/blocklists?page=${page}`, {\n      headers: this.defaultHeaders(),\n      mode: 'cors',\n      method: 'GET'\n    });\n\n    if (response.status !== 200) {\n      let error = `Fetch lists failed: ${response.status} => ${await response.text()}`;\n      console.log(error);\n      return ApiError.fromMessage(error);\n    }\n    return await response.json() as Blocklist[];\n  }\n}\n","import {useState, useEffect} from 'react';\nimport ApiError from \"../exceptions/ApiError\";\nimport ApiClient, {DnsQuery} from \"../services/ApiClient\";\n\nexport function UseDnsQuery(domainName: string|null, queryType: string): DnsQuery|null {\n  const [dnsQuery, setDnsQuery] = useState<DnsQuery|null>(null);\n\n  function getDnsQuery(domainName: string, queryType: string) {\n    clearDnsQuery();\n    ApiClient\n      .dnsQuery(domainName, queryType)\n      .then(applyDnsResponse);\n  }\n\n  function applyDnsResponse(dnsResponse: DnsQuery|ApiError) {\n    if (dnsResponse instanceof ApiError) {\n      return clearDnsQuery();\n    }\n    setDnsQuery(dnsResponse);\n  }\n\n  function clearDnsQuery() {\n    setDnsQuery(null);\n  }\n\n  useEffect(() => {\n    if (!domainName || !queryType) {\n      return clearDnsQuery();\n    }\n    if (dnsQuery && dnsQuery.queryName?.toLowerCase() === domainName.toLowerCase() && dnsQuery.queryType === queryType) {\n      return;\n    }\n    getDnsQuery(domainName, queryType);\n  });\n\n  return dnsQuery;\n}\n","import {useState, useEffect} from 'react';\nimport ApiError from \"../exceptions/ApiError\";\nimport ApiClient, {EntrySearchResponse} from \"../services/ApiClient\";\n\nexport function UseEntrySearch(query: string | null): EntrySearchResponse | null {\n  const [entrySearchResponse, setEntrySearchResponse] = useState<EntrySearchResponse | null>(null);\n\n  function searchEntries(entry: string) {\n    clearResponse();\n    ApiClient\n      .entrySearch(entry)\n      .then(applyEntrySearchResponse);\n  }\n\n  function applyEntrySearchResponse(response: EntrySearchResponse | ApiError) {\n    if (response instanceof ApiError) {\n      return setEntrySearchResponse(null);\n    }\n    setEntrySearchResponse(response);\n  }\n\n  function clearResponse() {\n    setEntrySearchResponse(null);\n  }\n\n  useEffect(() => {\n    if (!query || query.length === 0) {\n      return clearResponse();\n    }\n    if (entrySearchResponse && entrySearchResponse.query?.toLowerCase() === query.toLowerCase()) {\n      return;\n    }\n    searchEntries(query);\n  });\n\n  return entrySearchResponse;\n}\n","import React, {FunctionComponent, useState} from \"react\";\nimport {EntrySearch} from \"../entry-search/EntrySearch\";\nimport {DisplayEntrySearchResponse} from \"../entry-search-response/DisplayEntrySearchResponse\";\nimport {DisplayDnsQuery} from \"../dns-response/DisplayDnsQuery\";\nimport {UseDnsQuery} from \"../../hooks/UseDnsQuery\";\nimport {UseEntrySearch} from \"../../hooks/UseEntrySearch\";\nimport {useHistory} from \"react-router-dom\";\nimport {UseQueryParam} from \"../../hooks/UseQueryParam\";\n\nexport const EntrySearchPage: FunctionComponent = () =>  {\n  const query = UseQueryParam('q', '');\n  const [queryType, updateQueryType] = useState('A');\n  const queryResponse = UseDnsQuery(query, queryType);\n  const entrySearchResponse = UseEntrySearch(query);\n  const history = useHistory();\n\n  function updateDnsQueryType(type: string) {\n    updateQueryType(type);\n  }\n\n  function updateEntrySearch(query: string) {\n    let queryString = '';\n    if (query && query.length > 0) {\n      queryString = '?q=' + encodeURIComponent(query);\n    }\n    history.push(\"/entries/search\" + queryString);\n  }\n\n  return (\n    <div>\n      <EntrySearch value={query} onSubmit={(searchQuery: string) => updateEntrySearch(searchQuery)} />\n      <DisplayEntrySearchResponse entrySearchResponse={entrySearchResponse} />\n      <DisplayDnsQuery dnsQuery={queryResponse} onQueryTypeChange={(newQueryType: string) => updateDnsQueryType(newQueryType)} />\n    </div>\n  );\n};\n","import {useState, useEffect} from 'react';\nimport {useLocation} from \"react-router-dom\";\n\nexport function UseQueryParam<T>(paramName: string, defaultValue: T): T {\n  const [queryParamState, setQueryParamState] = useState<T>(defaultValue);\n  const queryParam = new URLSearchParams(useLocation().search);\n\n  useEffect(() => {\n    const value = queryParam.get(paramName) || defaultValue;\n    if (value !== queryParamState) {\n      console.log('setting query to ', value);\n      setQueryParamState(value as T);\n    }\n  }, [queryParam, paramName, defaultValue, queryParamState]);\n\n  return queryParamState;\n}\n","import {useState, useEffect} from 'react';\nimport ApiError from \"../exceptions/ApiError\";\nimport ApiClient, {Blocklist} from \"../services/ApiClient\";\n\nexport function UseBlocklists(): Blocklist[] | null {\n  const [loaded, setLoaded] = useState<boolean>(false);\n  const [blocklists, setBlocklists] = useState<Blocklist[] | null>(null);\n\n  async function loadBlocklists() {\n    let lists: Blocklist[] = [];\n    let complete = false;\n    for (let page=0; !complete; page++) {\n      let response = await ApiClient.fetchLists(page);\n      if (response instanceof ApiError) {\n        setLoaded(false);\n        return setBlocklists(null);\n      }\n      lists = lists.concat(response);\n      complete = response.length < 100;\n    }\n    setBlocklists(lists);\n  }\n\n  useEffect(() => {\n    if (!loaded) {\n      setLoaded(true);\n      loadBlocklists();\n    }\n  });\n\n  return blocklists;\n}\n","import React, {FunctionComponent, useState} from \"react\";\nimport {Blocklist} from \"../../services/ApiClient\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGavel, faHome, faFileDownload, faExclamationCircle } from '@fortawesome/free-solid-svg-icons'\nimport \"./BlocklistsTable.css\";\n\ninterface IBlocklistsTable {\n  blocklists: Blocklist[] | null;\n}\n\nexport const BlocklistsTable: FunctionComponent<IBlocklistsTable> = (props: IBlocklistsTable) => {\n  if (!props.blocklists) {\n    return <div />\n  }\n  let table = props.blocklists.map((blocklist) => {\n    return (\n      <section className='blocklist-card' key={blocklist.id}>\n        <a className=\"blocklist-name\" href={blocklist.homepageUrl} rel=\"noopener noreferrer\" target=\"_blank\">\n          {blocklist.name}\n        </a>\n        <ul className='blocklist-table-details-list'>\n          <li>\n            <a href={blocklist.homepageUrl} rel=\"noopener noreferrer\" target=\"_blank\">\n              <FontAwesomeIcon className='fa-fw' icon={faHome} />\n              Homepage\n            </a>\n          </li>\n          <li>\n            <a href={blocklist.downloadUrl} rel=\"noopener noreferrer\" target=\"_blank\">\n              <FontAwesomeIcon className='fa-fw' icon={faFileDownload} />\n              Download - {blocklist.format}\n            </a>\n          </li>\n          <li>\n            <a href={blocklist.issuesUrl} rel=\"noopener noreferrer\" target=\"_blank\">\n              <FontAwesomeIcon className='fa-fw' icon={faExclamationCircle}></FontAwesomeIcon>\n              Issues\n            </a>\n          </li>\n          <li>\n            <a href={blocklist.licenseUrl} rel=\"noopener noreferrer\" target=\"_blank\">\n              <FontAwesomeIcon className='fa-fw' icon={faGavel}/>\n              {blocklist.licenseType}\n            </a>\n          </li>\n        </ul>\n      </section>\n    );\n  })\n\n  return (\n    <section className='component-blocklist-table'>\n      {table}\n    </section>\n  );\n}\n","import React, {FunctionComponent} from \"react\";\nimport {UseBlocklists} from \"../../hooks/UseBlocklists\";\nimport {BlocklistsTable} from \"../blocklists-table/BlocklistsTable\";\n\nexport const BlocklistsPage: FunctionComponent = () =>  {\n  const blocklists = UseBlocklists();\n\n  return (\n      <BlocklistsTable blocklists={blocklists} />\n  );\n};\n","import {useState, useEffect} from 'react';\nimport ApiError from \"../exceptions/ApiError\";\nimport ApiClient, {VersionDiff} from \"../services/ApiClient\";\n\nexport function UseVersionDiff(firstVersion: string, secondVersion: string|null): VersionDiff|null {\n  const [versionDiff, setVersionDiff] = useState<VersionDiff|null>(null);\n\n  function getVersionDiff(firstVersion: string, secondVersion: string|null) {\n    ApiClient\n      .versionDiff(firstVersion, secondVersion)\n      .then(applyVersionDiff);\n  }\n\n  function applyVersionDiff(response: VersionDiff|ApiError) {\n    if (response instanceof ApiError) {\n      return setVersionDiff(null);\n    }\n    setVersionDiff(response);\n  }\n\n  function clearResponse() {\n    setVersionDiff(null);\n  }\n\n  useEffect(() => {\n    if (!firstVersion || firstVersion.length === 0) {\n      return clearResponse();\n    }\n    if (versionDiff && versionDiff.firstVersion === firstVersion && versionDiff.secondVersion === secondVersion) {\n      return;\n    }\n    getVersionDiff(firstVersion, secondVersion);\n  });\n\n  return versionDiff;\n}\n","import React, {FunctionComponent} from \"react\";\nimport {VersionDiff} from \"../../services/ApiClient\";\nimport \"./VersionDiffResponse.css\";\n\ninterface IVersionDiffResponse {\n  versionDiff: VersionDiff | null\n}\n\nexport const VersionDiffResponse: FunctionComponent<IVersionDiffResponse> = (props: IVersionDiffResponse) =>  {\n    if (!props.versionDiff) {\n      return null;\n    }\n\n    if (props.versionDiff.lines.length === 0) {\n      return (\n        <section>\n          Lists match!\n        </section>\n      )\n    }\n\n  const diffContent = props.versionDiff.lines.map((line, index) => {\n    if (line === '---') {\n      return (<div className={'line-break'} key={index}>---</div>);\n    }\n    let lineClass = 'existing-line';\n    if (line.startsWith('-')) {\n      lineClass = 'removed-line';\n    }\n    if (line.startsWith('+')) {\n      lineClass = 'added-line';\n    }\n    return (<div key={index} className={lineClass}>{line}</div>)\n  });\n\n  return (\n      <section className=\"component-version-diff-response basic-section\">{diffContent}</section>\n  );\n};\n","import React, {FunctionComponent} from \"react\";\n\nimport {useParams} from \"react-router-dom\";\nimport {UseVersionDiff} from \"../../hooks/UseVersionDiff\";\nimport {VersionDiffResponse} from \"../version-diff-response/VersionDiffResponse\";\n\nexport const VersionDiffPage: FunctionComponent = () =>  {\n  const { firstVersion, secondVersion } = useParams();\n  const versionDiff = UseVersionDiff(firstVersion, secondVersion);\n  return (\n    <VersionDiffResponse versionDiff={versionDiff} />\n  );\n};\n","import React, {FunctionComponent} from \"react\";\nimport \"./HeaderNav.css\";\nimport {NavLink} from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faSearch, faListUl} from '@fortawesome/free-solid-svg-icons'\n\nexport const HeaderNav: FunctionComponent = () =>  {\n  return (\n    <nav className=\"component-header-nav\">\n      <ul>\n        <li><NavLink to=\"/entries/search\"><FontAwesomeIcon icon={faSearch} /> Search</NavLink></li>\n        <li><NavLink to=\"/blocklists\"><FontAwesomeIcon icon={faListUl} /> Blocklists</NavLink></li>\n      </ul>\n    </nav>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport {Header} from \"./components/header/Header\";\nimport {Footer} from \"./components/footer/Footer\";\nimport {EntrySearchPage} from \"./components/entry-search-page/EntrySearchPage\";\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport {BlocklistsPage} from \"./components/blocklists-page/BlocklistsPage\";\nimport {VersionDiffPage} from \"./components/version-diff-page/VersionDiffPage\";\nimport {HeaderNav} from \"./components/header-nav/HeaderNav\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <BrowserRouter>\n        <HeaderNav />\n        <Header />\n        <main>\n            <Switch>\n              <Route path='/blocklists' component={BlocklistsPage} />\n              <Route path='/entries/search' component={EntrySearchPage} />\n              <Route path={[\n                '/versions/:firstVersion/diff/:secondVersion',\n                '/versions/:firstVersion/diff'\n              ]} component={VersionDiffPage} />\n              <Route>\n                <Redirect to='/entries/search' />\n              </Route>\n            </Switch>\n        </main>\n      </BrowserRouter>\n      <Footer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}